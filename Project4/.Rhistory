full_email_dtm <- DocumentTermMatrix(full_email_corpus_cleaned)
spamDTM_matrix <- as.matrix(full_email_dtm_cleaned[spam_idx_v])
spamDTM_matrix <- as.matrix(full_email_corpus_cleaned[spam_idx_v])
suppressWarnings(wordcloud(full_email_corpus_cleaned[spam_idx_v], min.freq=550))
# spam word cloud
suppressWarnings(wordcloud(full_email_corpus_cleaned[spam_idx_v], min.freq=550))
# ham word cloud
suppressWarnings(wordcloud(full_email_corpus_cleaned[ham_idx_v], min.freq=550))
full_emaildtm_sparse <- removeSparseTerms(full_email_dtm, 0.95)
full_emaildtm_sparse
train_index <- createDataPartition(full_email_df$email_group, p = 0.70, list = FALSE)
model_train <- full_email_df[train_index,]
model_test <- full_email_df[-train_index,]
View(model_test)
train_index <- createDataPartition(full_email_df$email_group, p = 0.70, list = FALSE)
model_train <- full_email_df[train_index,]
model_test <- full_email_df[-train_index,]
model_dtm_train <- full_email_dtm[train_index,]
model_dtm_test <- full_email_dtm[-train_index,]
model_corpus_train<- full_email_corpus_clean[train_index]
train_index <- createDataPartition(full_email_df$email_group, p = 0.70, list = FALSE)
model_train <- full_email_df[train_index,]
model_test <- full_email_df[-train_index,]
model_dtm_train <- full_email_dtm[train_index,]
model_dtm_test <- full_email_dtm[-train_index,]
model_corpus_train<- full_email_corpus_cleaned[train_index]
model_corpus_test<- full_email_corpus_cleaned[-train_index]
model_classifier <- naiveBayes(model_train, factor(model_train$email_group))
View(model_classifier)
train_index <- createDataPartition(full_email_df$email_group, p = 0.70, list = FALSE)
model_train <- full_email_df[train_index,]
model_test <- full_email_df[-train_index,]
model_dtm_train <- full_email_dtm[train_index,]
model_dtm_test <- full_email_dtm[-train_index,]
model_corpus_train<- full_email_corpus_cleaned[train_index]
model_corpus_test<- full_email_corpus_cleaned[-train_index]
model_classifier <- naiveBayes(model_train, factor(model_train$email_group))
model_test_pred <- predict(model_classifier, newdata=model_test)
table(model_test_pred, model_test$email_group)
train_index <- createDataPartition(full_email_df$email_group, p = 0.70, list = FALSE)
model_train <- full_email_df[train_index,]
model_test <- full_email_df[-train_index,]
model_dtm_train <- full_email_dtm[train_index,]
model_dtm_test <- full_email_dtm[-train_index,]
model_corpus_train<- full_email_corpus_cleaned[train_index]
model_corpus_test<- full_email_corpus_cleaned[-train_index]
random_forest <- randomForest(email_group ~ ., data = model_train)
model_train$email_group <- as.factor(model_train$email_group)
random_forest <- randomForest(email_group ~ ., data = model_train)
random_forest <- randomForest(model_train$email_group ~ ., data = model_train)
train_index <- createDataPartition(full_email_df$email_group, p = 0.70, list = FALSE)
model_train <- full_email_df[train_index,]
model_train$email_group <- as.factor(model_train$email_group)
sapply(model_train, class)
model_test <- full_email_df[-train_index,]
model_dtm_train <- full_email_dtm[train_index,]
model_dtm_test <- full_email_dtm[-train_index,]
model_corpus_train<- full_email_corpus_cleaned[train_index]
model_corpus_test<- full_email_corpus_cleaned[-train_index]
random_forest <- randomForest(model_train$email_group ~ ., data = model_train)
train_index <- createDataPartition(full_email_df$email_group, p = 0.70, list = FALSE)
model_train <- full_email_df[train_index,]
model_train$email_group <- as.factor(model_train$email_group)
sapply(model_train, class)
summary(model_train)
model_test <- full_email_df[-train_index,]
model_dtm_train <- full_email_dtm[train_index,]
model_dtm_test <- full_email_dtm[-train_index,]
model_corpus_train<- full_email_corpus_cleaned[train_index]
model_corpus_test<- full_email_corpus_cleaned[-train_index]
# random_forest <- randomForest(model_train$email_group ~ ., data = model_train)
summary(model_train$email_group)
train_index <- createDataPartition(full_email_df$email_group, p = 0.70, list = FALSE)
model_train <- full_email_df[train_index,]
model_train$email_group <- as.factor(model_train$email_group)
sapply(model_train, class)
summary(model_train$email_group)
model_test <- full_email_df[-train_index,]
model_dtm_train <- full_email_dtm[train_index,]
model_dtm_test <- full_email_dtm[-train_index,]
model_corpus_train<- full_email_corpus_cleaned[train_index]
model_corpus_test<- full_email_corpus_cleaned[-train_index]
random_forest <- randomForest(email_group ~ ., data = model_train)
random_forest <- randomForest(factor(email_group) ~ ., data = model_train)
random_forest <- randomForest(as.factor(email_group) ~ ., data = model_train)
random_forest <- randomForest(email_text ~ ., data = model_train)
random_forest <- randomForest(email_group ~ ., data = model_train)
random_forest <- randomForest(spam ~ ., data = model_train)
random_forest <- randomForest(email_group ~ ., data = model_train, method = "ranger")
model_train$email_text <- as.character(model_train$email_text)
sapply(model_train, class)
random_forest <- randomForest(email_group ~ ., data = model_train)
model_train$email_group <- as.factor(model_train$email_group)
model_train$email_text <- as.factor(model_train$email_text)
random_forest <- randomForest(email_group ~ ., data = model_train)
random_forest <- randomForest(formula = email_group ~ ., data = model_train)
train_index <- createDataPartition(full_email_df$email_group, p = 0.70, list = FALSE)
model_train <- full_email_df[train_index,]
model_train$email_group <- as.factor(model_train$email_group)
model_train$email_text <- as.factor(model_train$email_text)
sapply(model_train, class)
summary(model_train$email_group)
model_test <- full_email_df[-train_index,]
model_dtm_train <- full_email_dtm[train_index,]
model_dtm_test <- full_email_dtm[-train_index,]
model_corpus_train<- full_email_corpus_cleaned[train_index]
model_corpus_test<- full_email_corpus_cleaned[-train_index]
random_forest <- randomForest(formula = email_group ~ ., data = model_train)
random_forest <- randomForest(email_group ~ ., data = model_dtm_train)
View(model_test)
random_forest <- randomForest(x = model_train, y = model_train$email_group, ntree = 10)
data <- as.data.frame(as.matrix(model_dtm_train))
data$email_group <- model_train$email_group
random_forest <- randomForest(x = data[-97788], y = data$email_group, ntree = 10)
full_emaildtm_sparse <- removeSparseTerms(full_email_dtm, 0.75)
full_emaildtm_sparse
train_index <- createDataPartition(full_email_df$email_group, p = 0.70, list = FALSE)
model_train <- full_email_df[train_index,]
model_train$email_group <- as.factor(model_train$email_group)
model_train$email_text <- as.factor(model_train$email_text)
sapply(model_train, class)
summary(model_train$email_group)
model_test <- full_email_df[-train_index,]
model_dtm_train <- full_email_dtm[train_index,]
model_dtm_test <- full_email_dtm[-train_index,]
model_corpus_train<- full_email_corpus_cleaned[train_index]
model_corpus_test<- full_email_corpus_cleaned[-train_index]
data <- as.data.frame(as.matrix(model_dtm_train))
data$email_group <- model_train$email_group
random_forest <- randomForest(x = data[-97788], y = data$email_group, ntree = 10)
test_set <- as.data.frame(as.matrix(model_dtm_test))
test_set$email_group <- model_test$email_group
prediction <- predict(random_forest, newdata = test_set[-97788])
confusion_matrix <- table(test_set[, 97788], prediction)
confusion_matrix
data[1:10, 97787:97788]
data[1:10, 97783:97788]
data[1:10, 97760:97788]
data[1:10, 97787:97788]
View(model_train)
d$index <- as.numeric(row.names(model_train))
d$index <- as.numeric(row.names(model_train))
model_index$index <- as.numeric(row.names(model_train))
model_train$index <- as.numeric(row.names(model_train))
model_train[order(model_train$index), ]
View(model_train)
data[1:10, 97787:97788]
knitr::opts_chunk$set(echo = TRUE)
library(tm)
library(stringr)
library(SnowballC)
library(tidyverse)
library(stringi)
library(corpus)
library(wordcloud)
library(e1071)
library(NLP)
library(kableExtra)
library(corpus)
library(caret)
library(randomForest)
download.file(url = "http://spamassassin.apache.org/old/publiccorpus/20021010_easy_ham.tar.bz2", destfile = "20021010_easy_ham.tar.bz2")
untar("20021010_easy_ham.tar.bz2",compressed = "bzip2")
ham_emails = list.files(path = "easy_ham",full.names = TRUE)
download.file(url = "http://spamassassin.apache.org/old/publiccorpus/20030228_spam_2.tar.bz2", destfile = "20030228_spam_2.tar.bz2")
untar("20030228_spam_2.tar.bz2", compressed = "bzip2")
spam_emails = list.files(path = "spam_2", full.names = TRUE)
spam_emails_list <- NA
for (i in 1:length(spam_emails)){
email_text1 <- readLines(spam_emails[i])
email_list1 <- list(paste(email_text1, collapse = "\n"))
spam_emails_list <- c(spam_emails_list, email_list1)
}
ham_emails_list <- NA
for (i in 1:length(ham_emails)){
email_text <- readLines(ham_emails[i])
email_list <- list(paste(email_text, collapse = "\n"))
ham_emails_list <- c(ham_emails_list, email_list)
}
# removing blank first item in lists
ham_emails_list <- ham_emails_list[-1]
spam_emails_list <- spam_emails_list[-1]
ham_df <- data.frame(unlist(ham_emails_list))
ham_df$email_group <- 'ham'
ham_df <- ham_df %>%
rename("email_text" = unlist.ham_emails_list.)
spam_df <- data.frame(unlist(spam_emails_list))
spam_df$email_group <- 'spam'
spam_df <- spam_df %>%
rename("email_text" = unlist.spam_emails_list.)
full_email_df <- rbind(ham_df, spam_df)
full_email_df$email_group <- factor(full_email_df$email_group)
set.seed(3453)
full_email_df <- full_email_df[sample(nrow(full_email_df)),]
spam_idx_v <- which(full_email_df$email_group == "spam")
ham_idx_v <- which(full_email_df$email_group == "ham")
rm(email_list1, email_list, i, email_text, email_text1, ham_emails_list, spam_emails_list)
# spam_df$email_text <- iconv(spam_df$email_text, "ASCII", "UTF-8", sub="byte")
# ham_df$email_text <- iconv(ham_df$email_text, "ASCII", "UTF-8", sub="byte")
# full_email_df$email_text <- iconv(full_email_df$email_text, "ASCII", "UTF-8", sub="byte")
full_email_corpus <- Corpus(VectorSource(full_email_df$email_text))
full_email_corpus_cleaned <- full_email_corpus %>%
tm_map(stripWhitespace) %>%
tm_map(content_transformer(tolower)) %>%
tm_map(removePunctuation) %>%
tm_map(removeWords, stopwords()) %>%
tm_map(removeNumbers)
full_email_dtm <- DocumentTermMatrix(full_email_corpus_cleaned)
# spam word cloud
suppressWarnings(wordcloud(full_email_corpus_cleaned[spam_idx_v], min.freq=550))
# ham word cloud
suppressWarnings(wordcloud(full_email_corpus_cleaned[ham_idx_v], min.freq=550))
# remove terms that do not comprise of at least 75 percent of documents
full_emaildtm_sparse <- removeSparseTerms(full_email_dtm, 0.75)
full_emaildtm_sparse
# split the randomized data frame into a 70/30 split
train_index <- createDataPartition(full_email_df$email_group, p = 0.70, list = FALSE)
# 70 percent goes to the model_train
model_train <- full_email_df[train_index,]
# 30 percent goes to the model_test
model_test <- full_email_df[-train_index,]
# create document term matrices
model_dtm_train <- full_email_dtm[train_index,]
model_dtm_test <- full_email_dtm[-train_index,]
# create corpuses
model_corpus_train<- full_email_corpus_cleaned[train_index]
model_corpus_test<- full_email_corpus_cleaned[-train_index]
# make a data frame from the document term matrices for random forest and add a column with the factor
training_set <- as.data.frame(as.matrix(model_dtm_train))
trainingset$email_group <- model_train$email_group
training_set$email_group <- model_train$email_group
test_set <- as.data.frame(as.matrix(model_dtm_test))
test_set$email_group <- model_test$email_group
# create the classifier and run random forest
random_forest_classifier <- randomForest(x = training_set[-97788], y = training_set$email_group, ntree = 10)
# use the classifier to predict spam/ham on the test dataset
prediction <- predict(random_forest_classifier, newdata = test_set[-97788])
# look at the results
confusion_matrix <- table(test_set[, 97788], prediction)
confusion_matrix
# create document term matrices
model_sparsedtm_train <- full_emaildtm_sparse[train_index,]
model_sparsedtm_test <- full_emaildtm_sparse[-train_index,]
# make a data frame from the document term matrices for random forest and add a column with the factor
training_sparse_set <- as.data.frame(as.matrix(model_sparsedtm_train))
training_sparse_set$email_group <- model_train$email_group
test_sparse_set <- as.data.frame(as.matrix(model_sparsedtm_test))
test_sparse_set$email_group <- model_test$email_group
# create the classifier and run random forest
random_forest_sparse_classifier <- randomForest(x = training_sparse_set[-68], y = training_sparse_set$email_group, ntree = 10)
# use the classifier to predict spam/ham on the test dataset
prediction_sparse <- predict(random_forest_sparse_classifier, newdata = test_sparse_set[-68])
# look at the results
confusion_matrix_sparse <- table(test_sparse_set[, 68], prediction_sparse)
confusion_matrix_sparse
View(training_sparse_set)
# create document term matrices
model_sparsedtm_train <- full_emaildtm_sparse[train_index,]
model_sparsedtm_test <- full_emaildtm_sparse[-train_index,]
# make a data frame from the document term matrices for random forest and add a column with the factor
training_sparse_set <- as.data.frame(as.matrix(model_sparsedtm_train))
training_sparse_set$email_group <- model_train$email_group
test_sparse_set <- as.data.frame(as.matrix(model_sparsedtm_test))
test_sparse_set$email_group <- model_test$email_group
# create the classifier and run random forest
random_forest_sparse_classifier <- randomForest(x = training_sparse_set[-68], y = training_sparse_set$email_group, ntree = 10)
# use the classifier to predict spam/ham on the test dataset
prediction_sparse <- predict(random_forest_sparse_classifier, newdata = test_sparse_set[-68])
# look at the results
confusion_matrix_sparse <- table(test_sparse_set[, 68], prediction_sparse)
confusion_matrix_sparse
# create document term matrices
model_sparsedtm_train <- full_emaildtm_sparse[train_index,]
model_sparsedtm_test <- full_emaildtm_sparse[-train_index,]
# make a data frame from the document term matrices for random forest and add a column with the factor
training_sparse_set <- as.data.frame(as.matrix(model_sparsedtm_train))
training_sparse_set$email_group <- model_train$email_group
test_sparse_set <- as.data.frame(as.matrix(model_sparsedtm_test))
test_sparse_set$email_group <- model_test$email_group
# create the classifier and run random forest
random_forest_sparse_classifier <- randomForest(x = training_sparse_set[-68], y = training_sparse_set$email_group, ntree = 10)
# use the classifier to predict spam/ham on the test dataset
prediction_sparse <- predict(random_forest_sparse_classifier, newdata = test_sparse_set[-68])
# look at the results
confusion_matrix_sparse <- table(test_sparse_set[, 68], prediction_sparse)
confusion_matrix_sparse
# create document term matrices
model_sparsedtm_train <- full_emaildtm_sparse[train_index,]
model_sparsedtm_test <- full_emaildtm_sparse[-train_index,]
# make a data frame from the document term matrices for random forest and add a column with the factor
training_sparse_set <- as.data.frame(as.matrix(model_sparsedtm_train))
training_sparse_set$email_group <- model_train$email_group
test_sparse_set <- as.data.frame(as.matrix(model_sparsedtm_test))
test_sparse_set$email_group <- model_test$email_group
# create the classifier and run random forest
random_forest_sparse_classifier <- randomForest(x = training_sparse_set[-68], y = training_sparse_set$email_group, ntree = 10)
# use the classifier to predict spam/ham on the test dataset
prediction_sparse <- predict(random_forest_sparse_classifier, newdata = test_sparse_set[-68])
# look at the results
confusion_matrix_sparse <- table(test_sparse_set[, 68], prediction_sparse)
confusion_matrix_sparse
# create document term matrices
model_sparsedtm_train <- full_emaildtm_sparse[train_index,]
model_sparsedtm_test <- full_emaildtm_sparse[-train_index,]
# make a data frame from the document term matrices for random forest and add a column with the factor
training_sparse_set <- as.data.frame(as.matrix(model_sparsedtm_train))
training_sparse_set$email_group <- model_train$email_group
test_sparse_set <- as.data.frame(as.matrix(model_sparsedtm_test))
test_sparse_set$email_group <- model_test$email_group
# create the classifier and run random forest
random_forest_sparse_classifier <- randomForest(x = training_sparse_set[-68], y = training_sparse_set$email_group, ntree = 10)
# use the classifier to predict spam/ham on the test dataset
prediction_sparse <- predict(random_forest_sparse_classifier, newdata = test_sparse_set[-68])
# look at the results
confusion_matrix_sparse <- table(test_sparse_set[, 68], prediction_sparse)
confusion_matrix_sparse
download.file(url = "http://spamassassin.apache.org/old/publiccorpus/20021010_easy_ham.tar.bz2", destfile = "20021010_easy_ham.tar.bz2")
untar("20021010_easy_ham.tar.bz2",compressed = "bzip2")
ham_emails = list.files(path = "easy_ham",full.names = TRUE)
download.file(url = "http://spamassassin.apache.org/old/publiccorpus/20030228_spam_2.tar.bz2", destfile = "20030228_spam_2.tar.bz2")
untar("20030228_spam_2.tar.bz2", compressed = "bzip2")
spam_emails = list.files(path = "spam_2", full.names = TRUE)
### downloading for later model testing on completely new set of emails
download.file(url = "http://spamassassin.apache.org/old/publiccorpus/20030228_hard_ham.tar.bz2", destfile = "20030228_hard_ham.tar.bz2")
untar("20030228_hard_ham.tar.bz2",compressed = "bzip2")
ham_emails = list.files(path = "hard_ham",full.names = TRUE)
download.file(url = "http://spamassassin.apache.org/old/publiccorpus/20030228_spam.tar.bz2", destfile = "20030228_spam.tar.bz2")
untar("20030228_spam.tar.bz2", compressed = "bzip2")
spam_emails = list.files(path = "spam", full.names = TRUE)
download.file(url = "http://spamassassin.apache.org/old/publiccorpus/20021010_easy_ham.tar.bz2", destfile = "20021010_easy_ham.tar.bz2")
untar("20021010_easy_ham.tar.bz2",compressed = "bzip2")
ham_emails = list.files(path = "easy_ham",full.names = TRUE)
download.file(url = "http://spamassassin.apache.org/old/publiccorpus/20030228_spam_2.tar.bz2", destfile = "20030228_spam_2.tar.bz2")
untar("20030228_spam_2.tar.bz2", compressed = "bzip2")
spam_emails = list.files(path = "spam_2", full.names = TRUE)
### downloading for later model testing on completely new set of emails
download.file(url = "http://spamassassin.apache.org/old/publiccorpus/20030228_hard_ham.tar.bz2", destfile = "20030228_hard_ham.tar.bz2")
untar("20030228_hard_ham.tar.bz2",compressed = "bzip2")
ham_emails = list.files(path = "hard_ham",full.names = TRUE)
download.file(url = "http://spamassassin.apache.org/old/publiccorpus/20030228_spam.tar.bz2", destfile = "20030228_spam.tar.bz2")
untar("20030228_spam.tar.bz2", compressed = "bzip2")
spam_emails = list.files(path = "spam", full.names = TRUE)
download.file(url = "http://spamassassin.apache.org/old/publiccorpus/20021010_easy_ham.tar.bz2", destfile = "20021010_easy_ham.tar.bz2")
untar("20021010_easy_ham.tar.bz2",compressed = "bzip2")
ham_emails = list.files(path = "easy_ham",full.names = TRUE)
download.file(url = "http://spamassassin.apache.org/old/publiccorpus/20030228_spam_2.tar.bz2", destfile = "20030228_spam_2.tar.bz2")
untar("20030228_spam_2.tar.bz2", compressed = "bzip2")
spam_emails = list.files(path = "spam_2", full.names = TRUE)
### downloading for later model testing on completely new set of emails
download.file(url = "http://spamassassin.apache.org/old/publiccorpus/20030228_hard_ham.tar.bz2", destfile = "20030228_hard_ham.tar.bz2")
untar("20030228_hard_ham.tar.bz2",compressed = "bzip2")
ham_emails = list.files(path = "hard_ham",full.names = TRUE)
download.file(url = "http://spamassassin.apache.org/old/publiccorpus/20030228_spam.tar.bz2", destfile = "20030228_spam.tar.bz2")
untar("20030228_spam.tar.bz2", compressed = "bzip2")
spam_emails = list.files(path = "spam", full.names = TRUE)
download.file(url = "http://spamassassin.apache.org/old/publiccorpus/20021010_easy_ham.tar.bz2", destfile = "20021010_easy_ham.tar.bz2")
untar("20021010_easy_ham.tar.bz2",compressed = "bzip2")
ham_emails = list.files(path = "easy_ham",full.names = TRUE)
download.file(url = "http://spamassassin.apache.org/old/publiccorpus/20030228_spam_2.tar.bz2", destfile = "20030228_spam_2.tar.bz2")
untar("20030228_spam_2.tar.bz2", compressed = "bzip2")
spam_emails = list.files(path = "spam_2", full.names = TRUE)
### downloading for later model testing on completely new set of emails
download.file(url = "http://spamassassin.apache.org/old/publiccorpus/20030228_hard_ham.tar.bz2", destfile = "20030228_hard_ham.tar.bz2")
untar("20030228_hard_ham.tar.bz2",compressed = "bzip2")
ham_emails_2 = list.files(path = "hard_ham",full.names = TRUE)
download.file(url = "http://spamassassin.apache.org/old/publiccorpus/20030228_spam.tar.bz2", destfile = "20030228_spam.tar.bz2")
untar("20030228_spam.tar.bz2", compressed = "bzip2")
spam_emails_2 = list.files(path = "spam", full.names = TRUE)
download.file(url = "http://spamassassin.apache.org/old/publiccorpus/20021010_easy_ham.tar.bz2", destfile = "20021010_easy_ham.tar.bz2")
untar("20021010_easy_ham.tar.bz2",compressed = "bzip2")
ham_emails = list.files(path = "easy_ham",full.names = TRUE)
download.file(url = "http://spamassassin.apache.org/old/publiccorpus/20030228_spam_2.tar.bz2", destfile = "20030228_spam_2.tar.bz2")
untar("20030228_spam_2.tar.bz2", compressed = "bzip2")
spam_emails = list.files(path = "spam_2", full.names = TRUE)
### downloading for later model testing on completely new set of emails
download.file(url = "http://spamassassin.apache.org/old/publiccorpus/20030228_hard_ham.tar.bz2", destfile = "20030228_hard_ham.tar.bz2")
untar("20030228_hard_ham.tar.bz2",compressed = "bzip2")
ham_emails_2 = list.files(path = "hard_ham",full.names = TRUE)
download.file(url = "http://spamassassin.apache.org/old/publiccorpus/20030228_spam.tar.bz2", destfile = "20030228_spam.tar.bz2")
untar("20030228_spam.tar.bz2", compressed = "bzip2")
spam_emails_2 = list.files(path = "spam", full.names = TRUE)
getwd()
setwd("C:/Users/zalexander/Desktop/data607_cunysps/Project4")
download.file(url = "http://spamassassin.apache.org/old/publiccorpus/20021010_easy_ham.tar.bz2", destfile = "20021010_easy_ham.tar.bz2")
untar("20021010_easy_ham.tar.bz2",compressed = "bzip2")
ham_emails = list.files(path = "easy_ham",full.names = TRUE)
download.file(url = "http://spamassassin.apache.org/old/publiccorpus/20030228_spam_2.tar.bz2", destfile = "20030228_spam_2.tar.bz2")
untar("20030228_spam_2.tar.bz2", compressed = "bzip2")
spam_emails = list.files(path = "spam_2", full.names = TRUE)
### downloading for later model testing on completely new set of emails
download.file(url = "http://spamassassin.apache.org/old/publiccorpus/20030228_hard_ham.tar.bz2", destfile = "20030228_hard_ham.tar.bz2")
untar("20030228_hard_ham.tar.bz2",compressed = "bzip2")
ham_emails_2 = list.files(path = "hard_ham",full.names = TRUE)
download.file(url = "http://spamassassin.apache.org/old/publiccorpus/20030228_spam.tar.bz2", destfile = "20030228_spam.tar.bz2")
untar("20030228_spam.tar.bz2", compressed = "bzip2")
spam_emails_2 = list.files(path = "spam", full.names = TRUE)
download.file(url = "http://spamassassin.apache.org/old/publiccorpus/20030228_hard_ham.tar.bz2", destfile = "20030228_hard_ham.tar.bz2")
spam_emails_2 = list.files(path = "spam", full.names = TRUE)
ham_emails_2 = list.files(path = "hard_ham",full.names = TRUE)
spam_list <- NA
for (i in 1:length(spam_emails_2)){
email_text_3 <- readLines(spam_emails_2[i])
email_list_3 <- list(paste(email_text_3, collapse = "\n"))
spam_emails_list_3 <- c(spam_emails_list_3, email_list_3)
}
spam_list <- NA
for (i in 1:length(spam_emails_2)){
email_text_3 <- readLines(spam_emails_2[i])
email_list_3 <- list(paste(email_text_3, collapse = "\n"))
spam_emails_list_3 <- c(spam_list, email_list_3)
}
ham_list <- NA
for (i in 1:length(ham_emails_2)){
email_text_2 <- readLines(ham_emails_2[i])
email_list_2 <- list(paste(email_text, collapse = "\n"))
ham_emails_list_2 <- c(ham_list, email_list)
}
spam_list <- NA
for (i in 1:length(spam_emails_2)){
email_text_3 <- readLines(spam_emails_2[i])
email_list_3 <- list(paste(email_text_3, collapse = "\n"))
spam_emails_list_3 <- c(spam_list, email_list_3)
}
ham_list <- NA
for (i in 1:length(ham_emails_2)){
email_text_2 <- readLines(ham_emails_2[i])
email_list_2 <- list(paste(email_text_2, collapse = "\n"))
ham_emails_list_2 <- c(ham_list, email_list)
}
spam_list <- NA
for (i in 1:length(spam_emails_2)){
email_text_3 <- readLines(spam_emails_2[i])
email_list_3 <- list(paste(email_text_3, collapse = "\n"))
spam_emails_list_3 <- c(spam_list, email_list_3)
}
ham_list <- NA
for (i in 1:length(ham_emails_2)){
email_text_2 <- readLines(ham_emails_2[i])
email_list_2 <- list(paste(email_text_2, collapse = "\n"))
ham_emails_list_2 <- c(ham_list, email_list_2)
}
View(email_list_2)
spam_list <- NA
for (i in 1:length(spam_emails_2)){
email_text_3 <- readLines(spam_emails_2[i])
email_list_3 <- list(paste(email_text_3, collapse = "\n"))
spam_emails_list_3 <- c(spam_list, email_list_3)
}
ham_list <- NA
for (i in 1:length(ham_emails_2)){
email_text_4 <- readLines(ham_emails_2[i])
email_list_4 <- list(paste(email_text_4, collapse = "\n"))
ham_emails_list_4 <- c(ham_list, email_list_4)
}
spam_list <- NA
for (i in 1:length(spam_emails_2)){
email_text_3 <- readLines(spam_emails_2[i])
email_list_3 <- list(paste(email_text_3, collapse = "\n"))
spam_emails_list_3 <- c(spam_list, email_list_3)
}
ham_list <- NA
for (i in 1:length(ham_emails_2)){
email_text_4 <- readLines(ham_emails_2[i])
email_list_4 <- list(paste(email_text_4, collapse = "\n"))
ham_emails_list_4 <- c(ham_list, email_list_4)
}
spam_list <- NA
for (i in 1:length(spam_emails_2)){
email_text_3 <- readLines(spam_emails_2[i])
email_list_3 <- list(paste(email_text_3, collapse = "\n"))
spam_emails_list_3 <- c(spam_list, email_list_3)
}
spam_emails_2 = list.files(path = "spam", full.names = TRUE)
ham_emails_2 = list.files(path = "hard_ham",full.names = TRUE)
spam_list <- NA
for (i in 1:length(spam_emails_2)){
email_text_3 <- readLines(spam_emails_2[i])
email_list_3 <- list(paste(email_text_3, collapse = "\n"))
spam_emails_list_3 <- c(spam_list, email_list_3)
}
ham_list <- NA
for (i in 1:length(ham_emails_2)){
email_text_4 <- readLines(ham_emails_2[i])
email_list_4 <- list(paste(email_text_4, collapse = "\n"))
ham_emails_list_4 <- c(ham_list, email_list_4)
}
ham_list <- ham_list[-1]
spam_list <- spam_list[-1]
ham_df_new <- data.frame(unlist(ham_list))
View(ham_df_new)
spam_list <- NA
for (i in 1:length(spam_emails_2)){
email_text_3 <- readLines(spam_emails_2[i])
email_list_3 <- list(paste(email_text_3, collapse = "\n"))
spam_emails_list_3 <- c(spam_list, email_list_3)
}
ham_list <- NA
for (i in 1:length(ham_emails_2)){
email_text_4 <- readLines(ham_emails_2[i])
email_list_4 <- list(paste(email_text_4, collapse = "\n"))
ham_emails_list_4 <- c(ham_list, email_list_4)
}
View(spam_emails_list_3)
ham_list <- ham_emails_list_4[-1]
spam_list <- spam_emails_list_3[-1]
View(spam_list)
ham_df_new <- data.frame(unlist(ham_list))
ham_df_new$email_group <- 'ham'
ham_df_new <- ham_df_new %>%
rename("email_text" = unlist.ham_emails_list.)
View(ham_df_new)
ham_df_new <- data.frame(unlist(ham_list))
